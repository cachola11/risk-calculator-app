import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from risk_calculator import RiskMetricsCalculator
import io

def load_dataframe(uploaded_file):
    try:
        return pd.read_csv(uploaded_file)
    except pd.errors.ParserError:
        uploaded_file.seek(0)
        try:
            return pd.read_csv(uploaded_file, sep=';')
        except pd.errors.ParserError:
            uploaded_file.seek(0)
            try:
                return pd.read_excel(uploaded_file)
            except Exception:
                st.error("N√£o foi poss√≠vel ler o ficheiro. Verifique o formato e o separador.")
                return None

st.set_page_config(page_title="Calculadora de Risco (VaR e ES)", layout="wide")

# --- Sidebar: Inputs ---
with st.sidebar:
    st.title("‚öôÔ∏è Par√¢metros")
    uploaded_file = st.file_uploader("Carregue um ficheiro CSV ou Excel", type=["csv", "xlsx", "xls"])
    if uploaded_file:
        df = load_dataframe(uploaded_file)
        if df is None:
            st.stop()
        st.write("Primeiras linhas do DataFrame original:")
        st.write(df.head(10))
        cols_validas = [col for col in df.columns if not (col.startswith("Unnamed") or col.strip() == "")]
        date_col = st.selectbox("Coluna de datas", ["Nenhuma"] + cols_validas)
        fund_cols = st.multiselect("Colunas dos Fundos", cols_validas)
        benchmark_col = st.selectbox("Coluna do Benchmark", cols_validas)
        confidence = st.slider("N√≠vel de confian√ßa", 0.80, 0.99, 0.95, 0.01)
        metrics_selected = st.multiselect("M√©tricas de risco", ["VaR Hist√≥rico", "VaR Param√©trico", "ES Hist√≥rico", "ES Param√©trico"], default=["VaR Hist√≥rico"])
        dist = st.selectbox("Distribui√ß√£o param√©trica", ["Normal", "Student's t"])
# --- Main: Educational Content ---
st.title("üìä Calculadora de M√©tricas de Risco (VaR e ES)")
with st.expander("‚ÑπÔ∏è Aplica√ß√µes pr√°ticas na gest√£o de risco", expanded=True):
    st.markdown("""
**Aplica√ß√µes do VaR e ES na Gest√£o de Risco**

**Requisitos Regulamentares**
- **Basileia III/IV:** Os bancos utilizam o VaR e, cada vez mais, o ES para requisitos de capital de risco de mercado.
- **Solv√™ncia II:** As seguradoras usam m√©tricas semelhantes para c√°lculo de capital baseado no risco.
- **UCITS/AIFMD:** Fundos de investimento utilizam o VaR para monitoriza√ß√£o e divulga√ß√£o do risco.

**Gest√£o Interna de Risco**
- **Defini√ß√£o de Limites de Risco:** As empresas estabelecem limites de VaR/ES para mesas de opera√ß√µes ou carteiras.
- **Desempenho Ajustado ao Risco:** M√©tricas como o RAROC (Retorno Ajustado ao Risco sobre o Capital) incorporam VaR/ES na avalia√ß√£o de performance.
- **Aloca√ß√£o de Capital:** O VaR/ES ajuda a determinar quanto capital alocar a diferentes unidades de neg√≥cio com base no seu perfil de risco.

**Gest√£o de Carteiras**
- **Aloca√ß√£o de Ativos:** Otimiza√ß√£o de carteiras com base em m√©tricas de risco e n√£o apenas na volatilidade.
- **An√°lise de Diversifica√ß√£o:** Compara√ß√£o entre o VaR isolado e o VaR da carteira para avaliar benef√≠cios de diversifica√ß√£o.
- **Testes de Stress:** Utiliza√ß√£o de cen√°rios hist√≥ricos de perdas extremas para complementar as estimativas de VaR/ES.

**Boas Pr√°ticas**
- **Utilizar M√∫ltiplas M√©tricas:** Combinar VaR, ES, testes de stress e an√°lise de cen√°rios.
- **Backtesting:** Testar regularmente as estimativas de VaR face aos resultados reais para validar os modelos.
- **Considerar V√°rios Horizontes Temporais:** Analisar o risco tanto no curto como no longo prazo.
- **Transpar√™ncia:** Comunicar claramente as premissas e limita√ß√µes das m√©tricas de risco.
- **An√°lise Complementar:** Considerar outros fatores como risco de liquidez, que podem n√£o estar totalmente refletidos no VaR/ES.

**Desafios e Limita√ß√µes**
- **Risco de Modelo:** Todos os modelos s√£o simplifica√ß√µes da realidade e sujeitos a erro.
- **Depend√™ncias nas Caudas:** Abordagens padr√£o podem subestimar eventos extremos conjuntos.
- **Condi√ß√µes de Mercado Din√¢micas:** As caracter√≠sticas de risco mudam ao longo do tempo, especialmente em crises.
- **Considera√ß√µes de Liquidez:** O VaR/ES padr√£o n√£o considera o risco de liquidez em mercados sob stress.
- **Prociclicidade:** As m√©tricas de risco tendem a ser baixas em per√≠odos calmos e a aumentar acentuadamente em momentos de stress.
    """)

with st.expander("‚ÑπÔ∏è O que s√£o VaR e ES?"):
    st.markdown("""
**Valor em Risco (VaR) e Expected Shortfall (ES) Explicados**

- **VaR:** Mede a perda potencial m√°xima de uma carteira para um dado n√≠vel de confian√ßa e per√≠odo.
- **ES:** Mede a perda m√©dia esperada nos piores cen√°rios, quando a perda ultrapassa o VaR.

*Consulte a explica√ß√£o detalhada acima para f√≥rmulas e diferen√ßas.*
    """)

st.markdown("---")

# --- Prepare returns dataframe ---
if uploaded_file and fund_cols and benchmark_col:
    df_numeric = df[fund_cols + [benchmark_col]].replace(",", ".", regex=True)
    df_numeric = df_numeric.apply(pd.to_numeric, errors='coerce')
    df_returns = df_numeric.pct_change().dropna()

# --- Main: Results ---
if uploaded_file and fund_cols and benchmark_col:
    # --- Tabs for Results ---
    tabs = st.tabs(["Resumo", "Detalhe", "Distribui√ß√£o", "Sensibilidade", "Compara√ß√£o"])

    # --- Tab 1: Resumo ---
    with tabs[0]:
        st.header("üìã Tabela Resumo de M√©tricas de Risco")
        confs = [0.90, 0.95, 0.99]
        for col in fund_cols + [benchmark_col]:
            calc = RiskMetricsCalculator(df_returns[col], name=col)
            df_report = calc.generate_risk_report(
                confidence_levels=confs,
                time_horizon=1,
                dist="t" if dist == "Student's t" else "normal"
            )
            st.markdown(f"#### {col}")
            st.dataframe(df_report)

    # --- Tab 2: Detalhe ---
    with tabs[1]:
        st.header("üìä Resultados das M√©tricas de Risco")
        st.markdown(f"**N√≠vel de confian√ßa:** {confidence*100:.1f}%")
        for col in fund_cols + [benchmark_col]:
            calc = RiskMetricsCalculator(df_returns[col], name=col)
            st.subheader(col)
            metric_cols = st.columns(len(metrics_selected))
            for idx, metric in enumerate(metrics_selected):
                with metric_cols[idx]:
                    if metric == "VaR Hist√≥rico":
                        value = calc.calculate_historical_var(confidence)
                        if np.isnan(value):
                            st.warning("VaR Hist√≥rico: N/D")
                        else:
                            st.metric("VaR Hist√≥rico", f"{value:.4f}")
                            st.caption(f"Prob. perda > {value*100:.2f}% num dia.")
                    elif metric == "VaR Param√©trico":
                        value = calc.calculate_parametric_var(confidence, dist="t" if dist == "Student's t" else "normal")
                        if np.isnan(value):
                            st.warning("VaR Param√©trico: N/D")
                        else:
                            st.metric(f"VaR Param√©trico ({dist})", f"{value:.4f}")
                            st.caption(f"Prob. perda > {value*100:.2f}% num dia.")
                    elif metric == "ES Hist√≥rico":
                        value, _ = calc.calculate_historical_es(confidence)
                        if np.isnan(value):
                            st.warning("ES Hist√≥rico: N/D")
                        else:
                            st.metric("ES Hist√≥rico", f"{value:.4f}")
                            st.caption(f"M√©dia das piores perdas: {value*100:.2f}%")
                    elif metric == "ES Param√©trico":
                        value = calc.calculate_parametric_es(confidence, dist="t" if dist == "Student's t" else "normal")
                        if np.isnan(value):
                            st.warning("ES Param√©trico: N/D")
                        else:
                            st.metric(f"ES Param√©trico ({dist})", f"{value:.4f}")
                            st.caption(f"M√©dia das piores perdas: {value*100:.2f}%")

    # --- Tab 3: Distribui√ß√£o ---
    with tabs[2]:
        st.header("üìà Distribui√ß√£o dos Retornos")
        for col in fund_cols + [benchmark_col]:
            calc = RiskMetricsCalculator(df_returns[col], name=col)
            fig, ax = plt.subplots()
            ax.hist(df_returns[col], bins=50, color='skyblue', edgecolor='black')
            if "VaR Hist√≥rico" in metrics_selected:
                var_hist = calc.calculate_historical_var(confidence)
                if not np.isnan(var_hist):
                    ax.axvline(-var_hist, color='red', linestyle='--', label=f"VaR Hist. ({var_hist:.4f})")
            if "VaR Param√©trico" in metrics_selected:
                var_param = calc.calculate_parametric_var(confidence, dist="t" if dist == "Student's t" else "normal")
                if not np.isnan(var_param):
                    ax.axvline(-var_param, color='orange', linestyle='--', label=f"VaR Param. ({var_param:.4f})")
            ax.set_title(f"Distribui√ß√£o dos Retornos - {col}")
            ax.set_xlabel("Retorno di√°rio")
            ax.set_ylabel("Frequ√™ncia")
            ax.legend()
            st.pyplot(fig)

    # --- Tab 4: Sensibilidade ---
    with tabs[3]:
        st.header("üìà Sensibilidade ao N√≠vel de Confian√ßa e Horizonte Temporal")
        time_horizons = [1, 5, 10, 20]
        for col in fund_cols + [benchmark_col]:
            calc = RiskMetricsCalculator(df_returns[col], name=col)
            st.markdown(f"#### {col}")
            fig1 = calc.plot_confidence_sensitivity(dist="t" if dist == "Student's t" else "normal")
            st.pyplot(fig1)
            fig2 = calc.plot_time_horizon_sensitivity(time_horizons, dist="t" if dist == "Student's t" else "normal")
            st.pyplot(fig2)

    # --- Tab 5: Compara√ß√£o ---
    with tabs[4]:
        st.header("üìä Compara√ß√£o de Distribui√ß√µes")
        col1 = st.selectbox("Primeiro ativo para comparar", fund_cols + [benchmark_col], key="comp1")
        col2 = st.selectbox("Segundo ativo para comparar", fund_cols + [benchmark_col], key="comp2")
        if col1 and col2 and col1 != col2:
            calc1 = RiskMetricsCalculator(df_returns[col1], name=col1)
            calc2 = RiskMetricsCalculator(df_returns[col2], name=col2)
            fig = calc1.plot_comparative_distributions(
                comparison_returns=calc2.returns,
                comparison_name=col2,
                confidence_level=confidence,
                dist="t" if dist == "Student's t" else "normal"
            )
            st.pyplot(fig)

else:
    st.info("Por favor, carregue os dados e selecione as colunas para an√°lise.")

